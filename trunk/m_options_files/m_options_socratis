# Options :: INTEL, GNU
# Please remember to 'module swap intel gcc' in the shell to switch 
# between gnu and intel so that you can have access to the
# correct Sysnet libraries.
COMPILER    = INTEL

LIBRARIES   = /org/groups/aeg/LIBS

#------------------------------------------------------------------
# COMPILER SETTING (a 64bit processor architecture is assumed)
#------------------------------------------------------------------

DEBUG       ?= YES
LARGE        = NO
OPENMP_USE   = YES

# MPICC        = mpicc
# MPICXX       = mpicxx
# MPIF77       = mpif77
# MPIF90       = mpif90

ifeq ($(COMPILER),INTEL)
FF      =  ifort
CC      =  icc
FC      =  $(FF)
FFLAGS  = -fPIC
ifeq ($(OPENMP_USE),YES)
FFLAGS += -qopenmp
endif
ifeq ($(DEBUG),YES)
FFLAGS += -O0 -g -traceback -check all -debug all -check noarg_temp_created -assume noprotect_constants 
# FFLAGS +=  -fpe0 -Dintel_ -DALLOW_NON_INIT
endif
ifeq ($(DEBUG),NO)
FFLAGS += -O3 -xHost
# FFLAGS += -O3 -fpe1
endif
ifeq ($(LARGE),YES)
# FFLAGS += -mcmodel medium -shared-intel
# use the following flags if need >2G static data
FFLAGS += -mcmodel large -shared-intel
endif
CFLAGS  =
# Preprocessor defs to call Fortran from C 
# (-DAdd_ or -DAdd__ or -DUPPER)
CDEFS   = -DAdd_
endif

ifeq ($(COMPILER),GNU)
FF      =  gfortran
CC      =  gcc
FC      =  $(FF)
FFLAGS  = -m64
ifeq ($(OPENMP_USE),YES)
FFLAGS += -fopenmp
endif
ifeq ($(DEBUG),YES)
FFLAGS += -g -O0 -ffpe-trap=list -fno-backtrace
# -fprofile-arcs -ftest-coverage
endif
ifeq ($(DEBUG),NO)
FFLAGS += -O3 
endif
CFLAGS  =
# Preprocessor defs to call Fortran from C 
# (-DAdd_ or -DAdd__ or -DUPPER)
CDEFS   = -DAdd_
endif

# Accelerate compilation time when compiling libraries and problems
# Choose number of cores (or a little bit more)
J ?= 56

#------------------------------------------------------------------
# MKL LIBRARY
#------------------------------------------------------------------

# See https://software.intel.com/en-us/articles/intel-mkl-link-line-advisor

#MKL_LIB_PATH    = ${MKLROOT}/lib/intel64
#MKL_INC_PATH    = ${MKLROOT}/include

ifeq ($(COMPILER),INTEL)
# Libraries inside /usr/lib64
#MKL_LDFLAGS   = -lpthread -lm -ldl
# Libraries inside the MKL installation
MKL_LIB = -mkl
ifeq ($(OPENMP_USE),YES)
MKL_LIB = -mkl
endif
ifeq ($(OPENMP_USE),NO)
endif
MKL_LIB = -mkl               
endif

ifeq ($(COMPILER),GNU)
# Libraries inside /usr/lib64
MKL_LDFLAGS   = -lpthread -lm -ldl
# Libraries inside the MKL installation
MKL_LIB       = -Wl,--start-group \
                $(MKL_LIB_PATH)/libmkl_gf_lp64.a \
                $(MKL_LIB_PATH)/libmkl_core.a
ifeq ($(OPENMP_USE),YES)
MKL_LIB      += $(MKL_LIB_PATH)/libmkl_intel_thread.a
# Otherwise use $(MKL_LIB_PATH)/libmkl_gnu_thread.a for libgomp
endif
ifeq ($(OPENMP_USE),NO)
MKL_LIB      += $(MKL_LIB_PATH)/libmkl_sequential.a 
endif
MKL_LIB      += -Wl,--end-group \
                $(MKL_LDFLAGS)
endif

#------------------------------------------------------------------
# BLAS LIBRARY
#------------------------------------------------------------------

# Custom GoToBLAS for linear algebra 
# BLAS_VERSION  = 1.13
# BLAS_PARALLEL = seq
# BLAS_PATH     = $(KJOO_LIBS)/BLAS/GotoBLAS2/$(BLAS_VERSION)/$(BLAS_PARALLEL)
# BLAS_LIB      = $(BLAS_PATH)/libgoto2.a

# (Probably) Open source implementation in /usr/lib64
BLAS_LIB        = -lblas

#------------------------------------------------------------------
# LAPACK LIBRARY
#------------------------------------------------------------------

# LAPACK_VERSION = 3.2.1

# LAPACK_PATH     = $(KJOO_LIBS)/LAPACK/$(LAPACK_VERSION)
# LAPACK_LIB_PATH = $(LAPACK_PATH)
# LAPACK_LIB      = $(LAPACK_LIB_PATH)/lapack_LINUX.a

# (Probably) Open source implementation in /usr/lib64  
LAPACK_LIB        = -llapack

#------------------------------------------------------------------
# BLACS LIBRARY
#------------------------------------------------------------------

# BLACS_PATH = $(KJOO_LIBS)/BLACS
# BLACS_LIB_PATH = $(BLACS_PATH)/LIB
# BLACS_LIB      = $(BLACS_LIB_PATH)/blacs_MPI-LINUX-0.a \
#                  $(BLACS_LIB_PATH)/blacsF77init_MPI-LINUX-0.a \
#                  $(BLACS_LIB_PATH)/blacsCinit_MPI-LINUX-0.a \
#                  $(BLACS_LIB_PATH)/blacs_MPI-LINUX-0.a

#------------------------------------------------------------------
# SCALAPACK LIBRARY
#------------------------------------------------------------------

# SCALAPACK_VERSION  = 1.8.0
# SCALAPACK_PATH     = $(KJOO_LIBS)/SCALAPACK/$(SCALAPACK_VERSION)
# SCALAPACK_LIB_PATH = $(SCALAPACK_PATH)
# SCALAPACK_LIB      = $(SCALAPACK_LIB_PATH)/libscalapack.a

#------------------------------------------------------------------
# METIS LIBRARY
#------------------------------------------------------------------

ifeq ($(COMPILER),INTEL)
METIS_PATH      = $(LIBRARIES)/METIS_4/intel
endif
ifeq ($(COMPILER),GNU)
METIS_PATH      = $(LIBRARIES)/METIS_4/gnu
endif

METIS_LIB_PATH = $(METIS_PATH)
METIS_LIB      = $(METIS_LIB_PATH)/libmetis.a

#------------------------------------------------------------------
# PARMETIS LIBRARY
#------------------------------------------------------------------

# PARMETIS_LIB_PATH  = $(KJOO_LIBS)/PARMETIS
# PARMETIS_INC_PATH  = $(KJOO_LIBS)/PARMETIS

# PARMETIS_LIB       = $(PARMETIS_LIB_PATH)/libparmetis.a \
#                      $(PARMETIS_LIB_PATH)/libmetis.a

#------------------------------------------------------------------
# MUMPS LIBRARY
#------------------------------------------------------------------
# 
MUMPS_PARALLEL = seq
ifeq ($(COMPILER),INTEL)
MUMPS_PATH = $(LIBRARIES)/MUMPS/intel/$(MUMPS_PARALLEL)
endif
ifeq ($(COMPILER),GNU)
MUMPS_PATH = $(LIBRARIES)/MUMPS/gnu/$(MUMPS_PARALLEL)
endif
# 
MUMPS_LIB_PATH = $(MUMPS_PATH)/lib
# 
MUMPS_LIB      = $(MUMPS_LIB_PATH)/libdmumps.a \
                 $(MUMPS_LIB_PATH)/libzmumps.a \
                 $(MUMPS_LIB_PATH)/libmumps_common.a \
                 $(MUMPS_LIB_PATH)/libpord.a
MUMPS_INC_PATH = $(MUMPS_PATH)/include

MUMPS_MPI_LIB      = $(MUMPS_PATH)/libseq/libmpiseq.a
MUMPS_MPI_INC_PATH = $(MUMPS_PATH)/libseq

MUMPS_INCS  =
ifdef MUMPS_INC_PATH
MUMPS_INCS += -I$(MUMPS_INC_PATH)
endif
ifdef MUMPS_MPI_INC_PATH
MUMPS_INCS += -I$(MUMPS_MPI_INC_PATH)
endif

#------------------------------------------------------------------
# FLAME LIBRARY
#------------------------------------------------------------------

FLA_VERSION     = x86_64-5.1.0-30

ifeq ($(COMPILER),INTEL)
FLA_LIB_PATH    = $(LIBRARIES)/FLAME/intel/lib
FLA_INC_PATH    = $(LIBRARIES)/FLAME/intel/include-$(FLA_VERSION)
# Linking associated libraries inside ${INTEL_HOME}/lib/intel64
FLA_LDFLAGS     = -L${INTEL_HOME}/lib/intel64 \
                  -lifport -lifcore -limf -lsvml -lipgo -lirc -lirc_s
# Libraries inside /usr/lib64                  
FLA_LDFLAGS    += -lgfortran -lstdc++ -lutil -lm -lpthread -ldl
endif
ifeq ($(COMPILER),GNU)
FLA_LIB_PATH    = $(LIBRARIES)/FLAME/gnu/lib
FLA_INC_PATH    = $(LIBRARIES)/FLAME/gnu/include-$(FLA_VERSION)
# Linking associated libraries inside ${GCC_LIB}
FLA_LDFLAGS     = -L${GCC_LIB} -lgfortran -lstdc++
# Libraries inside /usr/lib64                  
FLA_LDFLAGS    += -lutil -lm -lpthread -ldl
endif

FLA_LIB         = $(FLA_LIB_PATH)/libflame-$(FLA_VERSION).a \
                  $(FLA_LDFLAGS)

#------------------------------------------------------------------
# UHM LIBRARY
#------------------------------------------------------------------

ifeq ($(COMPILER),INTEL)
UHM_PATH        = $(LIBRARIES)/UHM/intel/UHM
LINAL_PATH      = $(LIBRARIES)/UHM/intel/LINAL
VIS_PATH        = $(LIBRARIES)/UHM/intel/VIS
endif
ifeq ($(COMPILER),GNU)
UHM_PATH        = $(LIBRARIES)/UHM/gnu/UHM
LINAL_PATH      = $(LIBRARIES)/UHM/gnu/LINAL
VIS_PATH        = $(LIBRARIES)/UHM/gnu/VIS
endif

UHM_INC_PATH    = $(UHM_PATH)/include
LINAL_INC_PATH  = $(LINAL_PATH)/include
VIS_INC_PATH    = $(VIS_PATH)/include

VIS_LDFLAGS     = -L${HDF5_LIB} -lhdf5 -lhdf5_hl
VIS_LDFLAGS    += -L${VTK_LIB} -lvtkhdf5-6.3 -lvtkhdf5_hl-6.3 \
                               -lvtklibxml2-6.3 -lvtkzlib-6.3

UHM_LIB         = $(UHM_PATH)/lib/libuhm.a
LINAL_LIB       = $(LINAL_PATH)/lib/liblinal.a
VIS_LIB         = $(VIS_PATH)/lib/libvis.a \
                  $(VIS_LDFLAGS)

#------------------------------------------------------------------
# PREPROCESSOR VARIABLES
#------------------------------------------------------------------

COMPLEX  ?= 1
SHAPE    ?= 1
PARALLEL ?= 0

#------------------------------------------------------------------
# HP3D PATHS
#------------------------------------------------------------------

# Mainly for library makefile 

HP3D_BASE_PATH  = /org/groups/aeg/socratis/HP3D_svn/trunk
# HP3D_BASE_PATH  = /org/groups/aeg/socratis/hp3d_private

ifeq ($(COMPLEX),1)
HP3D_PATH       = $(HP3D_BASE_PATH)/complex
endif
ifeq ($(COMPLEX),0)
HP3D_PATH       = $(HP3D_BASE_PATH)/real
endif

SRC_PATH        = src
MODULE_PATH     = module
LIB_PATH        = lib

OBJ_PATH_COMPLEX =  _obj_complex_
OBJ_PATH_REAL    =  _obj_real_

ifeq ($(COMPLEX),1)
OBJ_PATH        = $(OBJ_PATH_COMPLEX)
endif
ifeq ($(COMPLEX),0)
OBJ_PATH        = $(OBJ_PATH_REAL)
endif

HP3D_LIB_EXTRA_INCS    =
ifdef MUMPS_INCS
HP3D_LIB_EXTRA_INCS   += $(MUMPS_INCS)
endif

ifeq ($(COMPILER),INTEL)
HP3D_MOD_OPTION_INC    = -module ./$(MODULE_PATH)
endif
ifeq ($(COMPILER),GNU)
HP3D_MOD_OPTION_INC    = -J./$(MODULE_PATH)
endif


# For problem makefiles

HP3D_LIB        = $(HP3D_PATH)/lib/libhp3d.a 
HP3D_FRONTAL    = $(HP3D_PATH)/lib/libfrontal.a
HP3D_COMMON     = $(HP3D_PATH)/lib/libhp3d_common.a
HP3D_GMP        = $(HP3D_PATH)/lib/libhp3d_gmp.a

#------------------------------------------------------------------
# FOR PROBLEM LINKING
#------------------------------------------------------------------
#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# HP3D LINKING (includes frontal solver)

# Cyclic dependencies force to compile as a group.
HP3D_LINK_LIBS    = -Wl,--start-group \
                    $(HP3D_LIB) $(HP3D_FRONTAL)
# HP3D_LINK_LIBS   += $(HP3D_COMMON) $(HP3D_GMP)
HP3D_LINK_LIBS   += -Wl,--end-group
HP3D_LINK_INCS    = -I$(HP3D_PATH)/common/hp3d \
                    -I$(HP3D_PATH)/common/graphics \
                    -I$(HP3D_PATH)/module

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# BASIC LINEAR ALGEBRA LIBRARIES LINKING

ifeq ($(COMPILER),INTEL)
LIN_ALG_LINK_LIBS    = $(MKL_LIB)
LIN_ALG_LINK_INCS    = -I$(MKL_INC_PATH)
endif
ifeq ($(COMPILER),GNU)
MKL_AVAILABLE = YES
ifeq ($(MKL_AVAILABLE),YES)
LIN_ALG_LINK_LIBS    = $(MKL_LIB)
LIN_ALG_LINK_INCS    = -I$(MKL_INC_PATH)
endif
ifeq ($(MKL_AVAILABLE),NO)
LIN_ALG_LINK_LIBS    = $(LAPACK_LIB) $(BLAS_LIB)
LIN_ALG_LINK_INCS    = 
endif
endif

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# MUMPS LINKING (includes basic linear algebra and METIS)

MUMPS_LINK_LIBS    = $(MUMPS_LIB) $(MUMPS_MPI_LIB) \
                     $(METIS_LIB) $(LIN_ALG_LINK_LIBS)
MUMPS_LINK_INCS    = $(MUMPS_INCS) $(LIN_ALG_LINK_INCS)

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# UHM SOLVER LINKING (includes all of MUMPS links + FLAME + VIS)

UHM_LINK_LIBS     = $(UHM_LIB) $(VIS_LIB) $(LINAL_LIB) $(FLA_LIB) \
                    $(MUMPS_LINK_LIBS)
                    
UHM_LINK_INCS     = -I$(UHM_INC_PATH) -I$(VIS_INC_PATH) \
                    -I$(LINAL_INC_PATH) -I$(FLA_INC_PATH) \
                    $(MUMPS_LINK_INCS)

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# EXTRA LIBS LINKING

X_LIB        = -lX11
# Use PTHREAD_LIB when not using MKL
PTHREAD_LIB  = -lpthread
# Use GCOV_LIB when coverage is desired (change FFLAGS as needed)
GCOV_LIB     = -lgcov

EXTRA_LINK_LIBS    = $(X_LIB)
EXTRA_LINK_INCS    =

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# TYPICAL PROBLEM LINKING

# In what follows UHM_LINK_??? can be replaced everywhere with 
# MUMPS_LINK_??? if UHM solver is not desired or by 
# LIN_ALG_LINK_??? if UHM and MUMPS solvers are not desired, but 
# BLAS and LAPACK support is still desired. Otherwise eliminate.
# The variable MODULE_PATH (and SRC_PATH) may be redefined inside 
# the problem makefile. 
PROB_LIBS     = $(HP3D_LINK_LIBS) \
                $(UHM_LINK_LIBS) \
                $(EXTRA_LINK_LIBS)
ifeq ($(COMPILER),INTEL)
PROB_INCS     = -module ./$(MODULE_PATH)
endif
ifeq ($(COMPILER),GNU)
PROB_INCS     = -J./$(MODULE_PATH)
endif
PROB_INCS    += $(HP3D_LINK_INCS) \
                $(UHM_LINK_INCS) \
                $(EXTRA_LINK_INCS)

# Files with ending in .F and .F90 (not .f and .f90)
# are preprocessed according to certain directives
PROB_PP_DEFS  = -D"C_MODE=$(COMPLEX)" \
                -D"PARALLEL_MODE=$(PARALLEL)" \
                -D"SHAPE_MODE=$(SHAPE)"
