c---------------------------------------------------------------------------------------
c
c   routine name       - add_prism_layer
c
c---------------------------------------------------------------------------------------
c
c   latest revision    - Jan 09
c
c   purpose            - routine adds a number of layers of prisms
c                        around a domain truncated with a sphere
c                        and partitioned into tetrahedra
c   arguments
c     in:
c            Nts       - sphere number (in GMP data structure)
c            Nr_layers - number of layers
c            Thickness - layers' thickness
c            No_dom    - subdomain numbers for the layers
c
c     out:               changes recorded in GMP data structure
c
! REMARKS:
!   1. for newly created POINTS, CURVES, TRIANGLES and PRISM, routine generates
!      following connectivities:
!
!        POINTS%Type            = 'Regular'
!              %Rdata(1:3)      = coordinates
!
!        CURVES%Type            = 'Seglin'
!              %EndPoNo(1:2)    = endpoints numbers
!
!        TRIANGLES%Type         = 'PTITri'
!                 %VertNo       = vertex numbers
!                 %Idata(1)     = surface number
!
!        RECTANGLES%Type        = 'BilQua'
!                  %VertNo(1:3) = vertex numbers
!
!        PRISMS%Type            = 'TIprism'
!              %VertNo(1:6)     = vertex numbers
!              %Domain          = domain number
!
!   2. full geometry connectivities are generated by routine connect and input_NETGEN
!
!---------------------------------------------------------------------------------------
c
      subroutine add_prism_layer(Nts,Nr_layers,Thickness,No_dom)
c
      use control , only : GEOM_TOL
      use GMP
#include "syscom.blk"
c
      dimension Thickness(Nr_layers),No_dom(Nr_layers)
c
c  ...for a point 'np' on the truncating surface, surface_points(np)
c     stores the number of a point on the first added sphere right
c     above 'np'
      integer, dimension(:), pointer:: surface_points
c
c  ...vertices for a triangle on the truncating sphere and above
      dimension nverts(3),nvert(3)
c
c  ...spheres numbers
      parameter(max_layers=16)
      dimension nospheres(0:max_layers)
c
c  ...work space
      dimension void(3),temp(3),aux(3,2)
c
c  ...relative (cumulative) layers' thickness
      dimension tlayer(max_layers)
c
c-----------------------------------------------------------------------
c
      iprint=0
c
c
 20   continue
c
c  ...check surface type
      if (SURFACES(Nts)%Type.ne.'Sphere') then
        write(*,7002) Nts
 7002   format(' add_prism_layer: surface ',i4,' is not a sphere!')
        stop
      endif
c
c  ...record sphere number
      nospheres(0)=Nts
c
c  ...check
      if (Nr_layers.gt.max_layers) then
        write(*,7001) Nr_layers
 7001   format(' add_prism_layer: increase max_layers, Nr_layers = ',i2)
        stop
      endif
c
c  ...total thickness
      dr=0.d0
      do i=1,Nr_layers ; dr=dr+Thickness(i) ; enddo
c
c  ...relative cumulative thicknesses
      tlayer(1:Nr_layers)=Thickness(1:Nr_layers)/dr
c
c  ...relative thicknesses
      do i=2,Nr_layers ; tlayer(i)=tlayer(i-1)+tlayer(i) ; enddo
c
c  ...printing
      if (iprint.eq.1) then
        write(*,7030) dr,tlayer(1:Nr_layers)
 7030   format(' add_prism_layer: dr,rlayer = ',f8.3,2x,10f8.3)
      endif
c
c  ...allocate rectangles and prisms
      if (.not.allocated(RECTANGLES)) allocate(RECTANGLES(MAXRE))
      if (.not.allocated(PRISMS))     allocate(PRISMS(MAXBT))
c
c-----------------------------------------------------------------------
c  STEP 1 : Add extra spherical surfaces
c-----------------------------------------------------------------------
c
      do i=1,Nr_layers
        NRSURFS=NRSURFS+1
        if (NRSURFS.gt.MAXSU) then
          write(*,7005)
 7005     format(' add_prism_layer: increse MAXSU!')
          stop
        endif
c
c  .....record sphere number
        nospheres(i)=NRSURFS
c
c  .....generate surface
        allocate(SURFACES(NRSURFS)%Rdata(4))
        SURFACES(NRSURFS)%Type      ='Sphere'
        SURFACES(NRSURFS)%Rdata(1:3)=SURFACES(Nts)%Rdata(1:3)
        SURFACES(NRSURFS)%Rdata(4)  =SURFACES(Nts)%Rdata(4)
     .                              +tlayer(i)*dr
      enddo
c
c  ...printing
      if (iprint.eq.1) then
        write(*,7006)
 7006   format(' add_prism_layer: surfaces were added...')
      endif
c
c-----------------------------------------------------------------------
c  STEP 2 : Generate the new points, radial curves, triangles prisms
c-----------------------------------------------------------------------
c
      allocate(surface_points(NRPOINT)) ; surface_points(1:NRPOINT)=0
c
c  ...save the original number of curves, triangles, points
      nrcurve_old=NRCURVE ; nrtrian_old=NRTRIAN ; nrpoint_old=NRPOINT
c
      do nt=1,nrtrian_old
c
c  .....check if the triangle is on the truncating sphere

c       1. use point coordinates
        idec=0
c  .....loop over vertices
        do jv=1,3
          np=TRIANGLES(nt)%VertNo(jv)
          call surf(Nts,POINTS(np)%Rdata(1:3), fval,void)
          if (iprint.eq.2) then
            write(*,7007) Nts,POINTS(np)%Rdata(1:3),fval
 7007       format(' add_prism_layer: Nts,point,fval = ',
     .              i3,2x,3f8.3,2x,e12.5)
            call pause
          endif
          if (abs(fval).le.GEOM_TOL)  idec=idec+1
        enddo
c  .....printing
        if ((iprint.eq.2).and.(idec.eq.3)) then
          write(*,7008) nt,idec
 7008     format(' add_prism_layer: nt,idec = ',i5,i2)
        endif
c
c       2. use surface adjacency info for double checking
        if (idec.eq.3) then
          if (TRIANGLES(nt)%Type.eq.'PTITri') then
            if (TRIANGLES(nt)%Idata(1).ne.Nts) then
              write(*,*)'add_prism_layer: inconsistency! [1]'
              stop
            endif
          else
            write(*,*)'add_prism_layer: inconsistency! [2]'
            stop
          endif
        endif
c
c  .....add triangle
        if (idec.eq.3) then
c
c  .......check whether the triangle is oriented towards the exterior
          np1=TRIANGLES(nt)%VertNo(1)
          np2=TRIANGLES(nt)%VertNo(2)
          np3=TRIANGLES(nt)%VertNo(3)
          aux(1:3,1)=POINTS(np2)%Rdata(1:3) - POINTS(np1)%Rdata(1:3)
          aux(1:3,2)=POINTS(np3)%Rdata(1:3) - POINTS(np1)%Rdata(1:3)
          temp(1:3) =POINTS(np1)%Rdata(1:3) - SURFACES(Nts)%Rdata(1:3)
c  .......normalize vectors so that mixed product is a meaningful
c         measure of degeracy
          call normalize(aux( 1:3,1))
          call normalize(aux( 1:3,2))
          call normalize(temp(1:3  ))
          call mixed_product(aux(1:3,1),aux(1:3,2),temp(1:3), s)
          if (s.gt.GEOM_TOL) then
            nverts(1:3) = (/np1,np2,np3/)
          elseif (s.lt.-GEOM_TOL) then
            nverts(1:3) = (/np1,np3,np2/)
          else
            write(*,6999) nt
 6999       format(' add_prism_layer: degenerated triangle, nt = ',i7)
ccc            stop
            call pause
          endif
c
c  .......loop through the triangle vertices
          do jv=1,3
            np=nverts(jv)
            if (surface_points(np).eq.0) then
c
c  ...........save the number of the new point above 'np'
              surface_points(np) = NRPOINT+1
c
c  ...........compute the radial direction
              temp(1:3) = POINTS(np)%Rdata(1:3)
     .                  - SURFACES(Nts)%Rdata(1:3)
              call normalize(temp)
c
c  ...........generate new points and curves
              do i=1,Nr_layers
                NRPOINT=NRPOINT+1
                if (NRPOINT.gt.MAXNP) then
                  write(*,7011)
 7011             format('add_prism_layer: INCREASE MAXNP')
                  stop 1
                endif
                POINTS(NRPOINT)%Type = 'Regular'
                allocate(POINTS(NRPOINT)%Rdata(3))
                POINTS(NRPOINT)%Rdata(1:3) = POINTS(np)%Rdata(1:3)
     .                                     + tlayer(i)*dr*temp(1:3)
c
                NRCURVE=NRCURVE+1
                if (NRCURVE.gt.MAXNC) then
                  write(*,7012)
 7012             format('add_prism_layer: INCREASE MAXNC')
                  stop 1
                endif
                CURVES(NRCURVE)%Type = 'Seglin'
                CURVES(NRCURVE)%NrFig = 0
                select case(i)
                case(1)
                  CURVES(NRCURVE)%EndPoNo(1) = np
                  CURVES(NRCURVE)%EndPoNo(2) = NRPOINT
                case default
                  CURVES(NRCURVE)%EndPoNo(1) = NRPOINT-1
                  CURVES(NRCURVE)%EndPoNo(2) = NRPOINT
                end select
              enddo
c
c  .........if the new points have not been generated yet
            endif
            nvert(jv) = surface_points(np)
c
c  .......end of loop through vertices
          enddo
          if (iprint.eq.1) then
            write(*,*) 'add_prism_layer: HAVE GENERATED POINTS',
     .                 ' AND VERTICAL CURVES'
          endif
c
c  .......generate new triangles
          do i=1,Nr_layers
            NRTRIAN = NRTRIAN+1
            if (NRTRIAN.gt.MAXTR) then
              write(*,7013)
 7013         format('add_prism_layer: INCREASE MAXTR')
              stop 1
            endif
            TRIANGLES(NRTRIAN)%Type = 'PTITri'
            TRIANGLES(NRTRIAN)%VertNo(1:3) = nvert(1:3)+i-1
            TRIANGLES(NRTRIAN)%EdgeNo(1:3) = 0
            TRIANGLES(NRTRIAN)%BlockNo(1:2) = 0
            allocate(TRIANGLES(NRTRIAN)%Idata(1))
            TRIANGLES(NRTRIAN)%Idata(1) = nospheres(i)
          enddo
          if (iprint.eq.1) then
            write(*,*) 'add_prism_layer: HAVE GENERATED TRIANGLES'
          endif
c
c  .......generate new prisms
          do i=1,Nr_layers
            NRPRISM=NRPRISM+1
            if (NRPRISM.gt.MAXBT) then
              write(*,7014)
 7014         format('add_prism_layer: INCREASE MAXBT')
              stop 1
            endif
            PRISMS(NRPRISM)%Type = 'TIprism'
            PRISMS(NRPRISM)%FigNo(1:5)=0
            PRISMS(NRPRISM)%EdgeNo(1:9)=0
            select case(i)
            case(1)
              PRISMS(NRPRISM)%VertNo(1:3) = nverts(1:3)
              PRISMS(NRPRISM)%VertNo(4:6) = nvert(1:3)
            case default
              PRISMS(NRPRISM)%VertNo(1:3) = nvert(1:3)+i-2
              PRISMS(NRPRISM)%VertNo(4:6) = nvert(1:3)+i-1
            end select
            PRISMS(NRPRISM)%Domain = No_dom(i)
          enddo
c
c  .....if a triangle on the truncating sphere
        endif
c
c  ...end of loop through triangles
      enddo
      if (iprint.eq.1) then
        write(*,*) 'add_prism_layer: DONE WITH STEP 2'
        call pause
      endif
c
c-----------------------------------------------------------------------
c
c  ...Step 3: Generate the new curves on the new spheres and rectangles
c
c
      do nc=1,nrcurve_old
c
c  .....check if on the truncating sphere (use only point coordinates)
        idec=0
        do jv=1,2
          np = CURVES(nc)%EndPoNo(jv)
          call surf(Nts,POINTS(np)%Rdata(1:3), fval,void)
          if (abs(fval).le.GEOM_TOL)  idec=idec+1
        enddo
        if (iprint.eq.1) then
          write(*,7021) nc,idec
 7021     format('add_prism_layer: nc,idec = ',i5,i2)
ccc          call pause
        endif
c
        if (idec.ne.2) cycle
        np1 = CURVES(nc)%EndPoNo(1)
        newp1 = surface_points(np1)
        np2 = CURVES(nc)%EndPoNo(2)
        newp2 = surface_points(np2)
        do i=1,Nr_layers
          NRCURVE=NRCURVE+1
          if (NRCURVE.gt.MAXNC) then
            write(*,7012)
            stop 1
          endif
ccc          CURVES(NRCURVE)%Type = '1SurfsCur'
          CURVES(NRCURVE)%Type = 'Seglin'
          allocate(CURVES(NRCURVE)%Idata(1))
          CURVES(NRCURVE)%Idata(1) = nospheres(i)
          CURVES(NRCURVE)%NrFig = 0
          CURVES(NRCURVE)%EndPoNo(1) = newp1+i-1
          CURVES(NRCURVE)%EndPoNo(2) = newp2+i-1
        enddo
        do i=1,Nr_layers
          NRRECTA = NRRECTA+1
          if (NRRECTA.gt.MAXRE) then
            write(*,7023)
 7023       format('add_prism_layer: INCREASE MAXRE')
            stop 1
          endif
ccc          RECTANGLES(NRRECTA)%Type = 'TraQua'
          RECTANGLES(NRRECTA)%Type = 'BilQua'
          select case(i)
          case(1)
            RECTANGLES(NRRECTA)%VertNo(1) = np1
            RECTANGLES(NRRECTA)%VertNo(2) = np2
            RECTANGLES(NRRECTA)%VertNo(3) = newp2
            RECTANGLES(NRRECTA)%VertNo(4) = newp1
          case default
            RECTANGLES(NRRECTA)%VertNo(1) = newp1 + i-2
            RECTANGLES(NRRECTA)%VertNo(2) = newp2 + i-2
            RECTANGLES(NRRECTA)%VertNo(3) = newp2 + i-1
            RECTANGLES(NRRECTA)%VertNo(4) = newp1 + i-1
          end select
          RECTANGLES(NRRECTA)%EdgeNo(1:4)=0
          RECTANGLES(NRRECTA)%BlockNo(1:2)=0
        enddo
c
c  ...end of loop through original curves
      enddo
c
      deallocate(surface_points)
c
c
      if (iprint.eq.1) then
        write(*,*) '-- Add prisms layers report --'
        write(*,6998) nrcurve_old,nrtrian_old,nrpoint_old
 6998   format(' NRCURVE_old,NRTRIAN_old,NRPOINT_old = ',3(i7,2x))
        write(*,6997) NRCURVE    ,NRTRIAN    ,NRPOINT
 6997   format(' NRCURVE_new,NRTRIAN_new,NRPOINT_new = ',3(i7,2x))
        write(*,*)''
        call pause
      endif
c
c
      end subroutine add_prism_layer
